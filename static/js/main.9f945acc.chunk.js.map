{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","styles","margin","width","App","style","showThumbs","src","alt","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0LAYeA,MATf,WACE,OACE,6BACE,0DCDFC,EAAS,CACTC,OAAQ,OACRC,MAAO,SAyCIC,MAtCf,WACE,OACE,yBAAKC,MAAOJ,GACV,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUK,YAAc,GACtB,6BACE,yBAAKC,IAAM,6GAA6GC,IAAI,YAC5H,uBAAGC,UAAU,UAAb,YAEF,6BACE,yBAAKF,IAAM,wEAAwEC,IAAI,cACvF,uBAAGC,UAAU,UAAb,aAEF,6BACE,yBAAKF,IAAM,8FAA8FC,IAAI,cAC7G,uBAAGC,UAAU,UAAb,cAEF,6BACE,yBAAKF,IAAM,2FAA2FC,IAAI,iBAC1G,uBAAGC,UAAU,UAAb,iBAEF,6BACE,yBAAKF,IAAM,yGAAyGC,IAAI,YACxH,uBAAGC,UAAU,UAAb,YAEF,6BACE,yBAAKF,IAAM,6GAA6GC,IAAI,YAC5H,uBAAGC,UAAU,UAAb,YAEF,6BACE,yBAAKF,IAAM,mGAAmGC,IAAI,uBAClH,uBAAGC,UAAU,aAAb,aC7BUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9f945acc.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Header() {\n  return (\n    <div>\n      <h1>Temples Visited in Japan</h1>\n      </div>\n    );\n}\n\n\nexport default Header;\n","import React from 'react';\nimport {Carousel} from 'react-responsive-carousel';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport Header from './Header';\n\nlet styles = {\n    margin: 'auto',\n    width: '500px'\n};\n\nfunction App() {\n  return (\n    <div style={styles}>\n      <Header />\n      <Carousel showThumbs = {false}>\n        <div>\n          <img src = \"https://gaijinpot.scdn3.secure.raxcdn.com/app/uploads/sites/6/2016/07/Dazaifu-Tenmangu-Flickr-1024x683.jpg\" alt=\"Dazaifu\"/>\n          <p className=\"legend\">Dazaifu</p>\n        </div>\n        <div>\n          <img src = \"https://cdn.triplelights.com/uploads/2019-08/uZTOfPGv_original-17.jpg\" alt=\"Kinkakuji\"/>\n          <p className=\"legend\">Kinkauji</p>\n        </div>\n        <div>\n          <img src = \"https://gaijinpot.scdn3.secure.raxcdn.com/app/uploads/sites/6/2016/05/Ginkaku-ji-Temple.jpg\" alt=\"Ginkakuji\"/>\n          <p className=\"legend\">Ginkakuji</p>\n        </div>\n        <div>\n          <img src = \"https://www.jrailpass.com/blog/wp-content/uploads/2019/04/kiyomidu-dera-temple-kyoto.jpg\" alt=\"Kiyomizudera\"/>\n          <p className=\"legend\">Kiyomizudera</p>\n        </div>\n        <div>\n          <img src = \"https://thetruejapan.com/wp-content/uploads/2017/10/Sensoji-Temple-at-Night-e1507469976304-830x450.jpg\" alt=\"Sensoji\"/>\n          <p className=\"legend\">Sensoji</p>\n        </div>\n        <div>\n          <img src = \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRGuLNoQ9jQF7MI0SkhmH3i721dzBS2laavsSAjF9JGgnKYO8je\" alt=\"Ryoanji\"/>\n          <p className=\"legend\">Ryonaji</p>\n        </div>\n        <div>\n          <img src = \"https://d3bbatwdaufxg9.cloudfront.net/thumb/m/2014/5558/6539/02-20150722_Manpukuji_lotus-123.jpg\" alt=\"Obakusan Manpukuji\"/>\n          <p className=\"Manpukuji\">Japan</p>\n        </div>\n      </Carousel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}